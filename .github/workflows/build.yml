name: Build and Release ESP32 Firmware

on:
  push:
    branches: [ main ]

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build with ESP-IDF
      uses: espressif/esp-idf-ci-action@v1
      with:
        esp_idf_version: v5.1.1
        target: esp32
        path: ./

    - name: Extract version from CMakeLists.txt
      id: version
      run: |
        # Try to extract version from main/CMakeLists.txt
        VERSION=$(grep -oP 'set\(COMPONENT_VER "\K[^"]*' main/CMakeLists.txt || echo "1.0.0")
        if [ -z "$VERSION" ] || [ "$VERSION" = "1.0.0" ]; then
          # Fallback: extract from main.c
          VERSION=$(grep -oP 'FIRMWARE_VERSION "\K[^"]*' main/main.c 2>/dev/null || echo "1.0.0")
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Detected version: $VERSION"

    - name: Prepare firmware files
      run: |
        # Create output directory
        mkdir -p firmware-release
        
        # Copy binary files
        cp build/bootloader/bootloader.bin firmware-release/
        cp build/partition_table/partition-table.bin firmware-release/
        
        # Find and copy the main application binary
        for file in build/*.bin; do
          if [[ $file != *"bootloader"* && $file != *"partition-table"* ]]; then
            cp "$file" firmware-release/firmware.bin
            echo "Main firmware: $(basename $file) -> firmware.bin"
            break
          fi
        done
        
        # Generate version info
        cat > firmware-release/version.json << EOF
        {
          "version": "${{ steps.version.outputs.version }}",
          "build_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "url": "https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/firmware.bin",
          "project": "ESP32-Auto-OTA"
        }
        EOF
        
        echo "=== Files ready for release ==="
        ls -la firmware-release/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          # ESP32 Auto-OTA Firmware
          
          **Version:** ${{ steps.version.outputs.version }}
          **Build Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## Files
          - `firmware.bin` - Main application
          - `bootloader.bin` - Bootloader  
          - `partition-table.bin` - Partition table
          
          ESP32 devices will auto-update when this release is published.
        files: |
          firmware-release/bootloader.bin
          firmware-release/partition-table.bin
          firmware-release/firmware.bin
          firmware-release/version.json
        draft: false
        prerelease: false

    - name: Upload firmware artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ steps.version.outputs.version }}
        path: firmware-release/
        retention-days: 30
